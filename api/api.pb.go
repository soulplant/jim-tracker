// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	Delivery
	FetchAllRequest
	FetchAllResponse
	RecordDeliveryRequest
	RecordDeliveryResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Delivery struct {
	// The date this delivery is for in YYYYMMDD.
	Date string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	// The timestamp of the delivery.
	Time int64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
}

func (m *Delivery) Reset()                    { *m = Delivery{} }
func (m *Delivery) String() string            { return proto.CompactTextString(m) }
func (*Delivery) ProtoMessage()               {}
func (*Delivery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Delivery) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Delivery) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type FetchAllRequest struct {
}

func (m *FetchAllRequest) Reset()                    { *m = FetchAllRequest{} }
func (m *FetchAllRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchAllRequest) ProtoMessage()               {}
func (*FetchAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FetchAllResponse struct {
	Delivery []*Delivery `protobuf:"bytes,1,rep,name=delivery" json:"delivery,omitempty"`
}

func (m *FetchAllResponse) Reset()                    { *m = FetchAllResponse{} }
func (m *FetchAllResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchAllResponse) ProtoMessage()               {}
func (*FetchAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchAllResponse) GetDelivery() []*Delivery {
	if m != nil {
		return m.Delivery
	}
	return nil
}

type RecordDeliveryRequest struct {
	Date int64 `protobuf:"varint,1,opt,name=date" json:"date,omitempty"`
}

func (m *RecordDeliveryRequest) Reset()                    { *m = RecordDeliveryRequest{} }
func (m *RecordDeliveryRequest) String() string            { return proto.CompactTextString(m) }
func (*RecordDeliveryRequest) ProtoMessage()               {}
func (*RecordDeliveryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RecordDeliveryRequest) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type RecordDeliveryResponse struct {
}

func (m *RecordDeliveryResponse) Reset()                    { *m = RecordDeliveryResponse{} }
func (m *RecordDeliveryResponse) String() string            { return proto.CompactTextString(m) }
func (*RecordDeliveryResponse) ProtoMessage()               {}
func (*RecordDeliveryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Delivery)(nil), "api.Delivery")
	proto.RegisterType((*FetchAllRequest)(nil), "api.FetchAllRequest")
	proto.RegisterType((*FetchAllResponse)(nil), "api.FetchAllResponse")
	proto.RegisterType((*RecordDeliveryRequest)(nil), "api.RecordDeliveryRequest")
	proto.RegisterType((*RecordDeliveryResponse)(nil), "api.RecordDeliveryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiService service

type ApiServiceClient interface {
	FetchAll(ctx context.Context, in *FetchAllRequest, opts ...grpc.CallOption) (*FetchAllResponse, error)
	RecordDelivery(ctx context.Context, in *RecordDeliveryRequest, opts ...grpc.CallOption) (*RecordDeliveryResponse, error)
}

type apiServiceClient struct {
	cc *grpc.ClientConn
}

func NewApiServiceClient(cc *grpc.ClientConn) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) FetchAll(ctx context.Context, in *FetchAllRequest, opts ...grpc.CallOption) (*FetchAllResponse, error) {
	out := new(FetchAllResponse)
	err := grpc.Invoke(ctx, "/api.ApiService/FetchAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RecordDelivery(ctx context.Context, in *RecordDeliveryRequest, opts ...grpc.CallOption) (*RecordDeliveryResponse, error) {
	out := new(RecordDeliveryResponse)
	err := grpc.Invoke(ctx, "/api.ApiService/RecordDelivery", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiService service

type ApiServiceServer interface {
	FetchAll(context.Context, *FetchAllRequest) (*FetchAllResponse, error)
	RecordDelivery(context.Context, *RecordDeliveryRequest) (*RecordDeliveryResponse, error)
}

func RegisterApiServiceServer(s *grpc.Server, srv ApiServiceServer) {
	s.RegisterService(&_ApiService_serviceDesc, srv)
}

func _ApiService_FetchAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).FetchAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/FetchAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).FetchAll(ctx, req.(*FetchAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RecordDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RecordDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ApiService/RecordDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RecordDelivery(ctx, req.(*RecordDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAll",
			Handler:    _ApiService_FetchAll_Handler,
		},
		{
			MethodName: "RecordDelivery",
			Handler:    _ApiService_RecordDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x49, 0x23, 0x92, 0x8e, 0xd6, 0xea, 0x60, 0x24, 0x44, 0x0f, 0x61, 0x4f, 0x11, 0xb1,
	0xc1, 0x78, 0xf6, 0x50, 0x10, 0x8f, 0x1e, 0xe2, 0xd9, 0xc3, 0x9a, 0x8c, 0x75, 0x61, 0xcd, 0xae,
	0xc9, 0x1a, 0xf0, 0xea, 0x2b, 0xf8, 0x38, 0x3e, 0x86, 0xaf, 0xe0, 0x83, 0x48, 0x76, 0xdb, 0x4a,
	0x43, 0x6f, 0xc3, 0xfc, 0xb3, 0xff, 0xf7, 0xc1, 0xc2, 0x98, 0x6b, 0x31, 0xd3, 0x8d, 0x32, 0x0a,
	0x7d, 0xae, 0x45, 0x7c, 0xb6, 0x50, 0x6a, 0x21, 0x29, 0xe3, 0x5a, 0x64, 0xbc, 0xae, 0x95, 0xe1,
	0x46, 0xa8, 0xba, 0x75, 0x27, 0x2c, 0x87, 0xe0, 0x96, 0xa4, 0xe8, 0xa8, 0xf9, 0x40, 0x84, 0x9d,
	0x8a, 0x1b, 0x8a, 0xbc, 0xc4, 0x4b, 0xc7, 0x85, 0x9d, 0xfb, 0x9d, 0x11, 0xaf, 0x14, 0x8d, 0x12,
	0x2f, 0xf5, 0x0b, 0x3b, 0xb3, 0x23, 0x98, 0xde, 0x91, 0x29, 0x5f, 0xe6, 0x52, 0x16, 0xf4, 0xf6,
	0x4e, 0xad, 0x61, 0x37, 0x70, 0xf8, 0xbf, 0x6a, 0xb5, 0xaa, 0x5b, 0xc2, 0x73, 0x08, 0xaa, 0x65,
	0x75, 0xe4, 0x25, 0x7e, 0xba, 0x97, 0x4f, 0x66, 0xbd, 0xdb, 0x8a, 0x57, 0xac, 0x63, 0x76, 0x01,
	0x61, 0x41, 0xa5, 0x6a, 0xaa, 0x75, 0xe6, 0x7a, 0x37, 0x94, 0x7c, 0xa7, 0xc4, 0x22, 0x38, 0x19,
	0x1e, 0x3b, 0x62, 0xfe, 0xed, 0x01, 0xcc, 0xb5, 0x78, 0xa0, 0xa6, 0x13, 0x25, 0xe1, 0x3d, 0x04,
	0x2b, 0x29, 0x3c, 0xb6, 0xe8, 0x81, 0x76, 0x1c, 0x0e, 0xb6, 0xae, 0x87, 0x85, 0x9f, 0x3f, 0xbf,
	0x5f, 0xa3, 0x29, 0x4e, 0xb2, 0xee, 0x2a, 0x7b, 0xee, 0xd3, 0x4b, 0x2e, 0x25, 0x3e, 0xc2, 0xc1,
	0x26, 0x18, 0x63, 0xfb, 0x7e, 0xab, 0x7a, 0x7c, 0xba, 0x35, 0x5b, 0x12, 0xd0, 0x12, 0xf6, 0x11,
	0x7a, 0x42, 0x63, 0x6f, 0x9e, 0x76, 0xed, 0x8f, 0x5c, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x58,
	0xe5, 0xad, 0x2b, 0xc1, 0x01, 0x00, 0x00,
}
